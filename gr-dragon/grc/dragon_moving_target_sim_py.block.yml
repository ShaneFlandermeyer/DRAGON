id: dragon_moving_target_sim_py
label: Moving Target Simulator (Python)
category: '[dragon]'

templates:
  imports: import dragon
  make: |-
    dragon.moving_target_sim_py(${tgt_rng}, ${tgt_vel}, ${tgt_rcs}, ${sig_freq_tx}, ${sig_prf}, ${samp_rate},
    ${start_tag_key}, ${end_tag_key}, ${pad_pulses}, ${sig_comp_pulsewidth})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
- id: tgt_rng
  label: Target Range
  dtype: float_vector
  default: []
- id: tgt_vel
  label: Target Velocity
  dtype: float_vector
  default: []
- id: tgt_rcs
  label: Target RCS
  dtype: float_vector
  default: []
- id: sig_freq_tx
  label: Tx Frequency
  dtype: float
  default: 0
  hide: part
- id: sig_prf
  label: PRF
  dtype: float
  default: 0
  hide: part
- id: samp_rate
  label: Sample Rate
  dtype: float
  default: 0
  hide: part
  # NOTE: These two parameters currently do nothing. They're added in case future implementations want them
- id: start_tag_key
  label: Start Tag Key
  dtype: string
  default: "SOB"
  hide: part
  optional: 1
- id: end_tag_key
  label: End Tag Key
  dtype: string
  default: "EOB"
  hide: part
  optional: 1
# Parameters for padding pulses
- id: pad_pulses
  label: Pad Pulses?
  dtype: bool
  default: 'False'
  options: ['True', 'False']
- id: sig_comp_pulsewidth
  label: Compressed Pulse Width
  dtype: float
  default: 0

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: in
  domain: stream
  dtype: complex
  vlen: 1
  optional: 0

outputs:
- label: out
  domain: stream
  dtype: complex
  vlen: 1
  optional: 0

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1