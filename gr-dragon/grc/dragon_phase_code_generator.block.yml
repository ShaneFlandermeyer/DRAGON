id: dragon_phase_code_generator
label: phase_code_generator
category: '[dragon]'

templates:
  imports: import dragon
  make: dragon.phase_code_generator(${type}, ${code_len}, ${repeat}, ${tags})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
  - id: type
    label: Code Type
    dtype: enum
    options: [ dragon.phase_code.P4 ]
    option_labels: [ P4 ]
  - id: code_len
    label: Code Length
    dtype: int
    default: 1
  - id: repeat
    label: Repeat
    dtype: enum
    default: 'True'
    options: [ 'True','False' ]
    option_labels: [ 'Yes','No' ]
    hide: ${'part'}
  - id: tags
    label: Tags
    dtype: raw
    default: '[]'
    hide: ${'part'}


#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
# TODO: Add different output types
#inputs:
#- label: ...
#  domain: ...
#  dtype: ...
#  vlen: ...
#  optional: ...

outputs:
  - label: out
    domain: stream
    dtype: float
    vlen: ${code_len}

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
